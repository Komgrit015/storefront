<?php

declare(strict_types=1);

namespace SwagTemplate\Extension;

use Shopware\Core\Content\Category\CategoryEntity;
use Shopware\Core\Framework\Context;
use Shopware\Core\Framework\DataAbstractionLayer\EntityRepository;
use Shopware\Core\Framework\DataAbstractionLayer\Search\Criteria;
use Shopware\Core\Framework\DataAbstractionLayer\Search\Filter\EqualsFilter;
use Twig\Extension\AbstractExtension;
use Twig\TwigFunction;
use Shopware\Core\Framework\DataAbstractionLayer\Search\Filter\ContainsFilter;

/**
 * Class CategoryExtension
 * @package Swag\Template\Extension
 */
class CategoryExtension extends AbstractExtension
{
    /**
     * @var EntityRepository
     */
    private $categoryRepository;

    /**
     * CategoryExtension constructor.
     * @param EntityRepository $categoryRepository
     */
    public function __construct(EntityRepository $categoryRepository)
    {
        $this->categoryRepository = $categoryRepository;
    }

    /**
     * @return TwigFunction[]
     */
    public function getFunctions(): array
    {
        return [
            new TwigFunction('getCategoryIdByName', [$this, 'getCategoryIdByName']),
        ];
    }

    /**
     * @param string $name
     * @param Context $context
     * @param string $parentCategory
     * @return null|int
     */
    public function getCategoryIdByName(?string $name, Context $context, $parentCategory = '', bool $onlyWithProducts = false)
    {
        if (null === $name) {
            return null;
        }

        $criteria = new Criteria();
        $criteria->addFilter(new EqualsFilter('name', $name));
        $criteria->addFilter(new ContainsFilter('breadcrumb', 'Weine'));

        if (!empty($parentCategory)) {
            $criteria->addFilter(new ContainsFilter('breadcrumb', $parentCategory));
        }

        if ($onlyWithProducts) {
            $criteria->addAssociation('products');

            /** @var CategoryEntity $category */
            $category = $this->categoryRepository
                ->search($criteria, $context)
                ->first();

            if (! $category || ! $category->getProducts() || ! $category->getProducts()->count()) {
                return null;
            }
        } else {
            /** @var CategoryEntity $category */
            $category = $this->categoryRepository
                ->search($criteria, $context)
                ->first();
        }

        return !$category ? null : $category->getId();
    }
}
